# colored_logger_helpers.py - Helper functions cho m√†u c·ªë ƒë·ªãnh
import logging
from rich.logging import RichHandler
from rich.console import Console

# Setup c∆° b·∫£n
console = Console(force_terminal=True, width=120)
rich_handler = RichHandler(console=console, show_time=True, show_path=False, markup=True)
logger = logging.getLogger("app.test")
logger.setLevel(logging.DEBUG)
logger.addHandler(rich_handler)

class ColoredLogger:
    """Wrapper class cung c·∫•p c√°c method v·ªõi m√†u c·ªë ƒë·ªãnh"""
    
    def __init__(self, logger):
        self.logger = logger
    
    # C√°c m√†u t√πy ch·ªânh cho t·ª´ng level
    def debug(self, message, color="cyan"):
        self.logger.debug(f"üîç [{color}]{message}[/{color}]")
    
    def info(self, message, color="bright_magenta"):
        self.logger.info(f"‚ÑπÔ∏è  [{color}]{message}[/{color}]")
    
    def warning(self, message, color="orange3"):
        self.logger.warning(f"‚ö†Ô∏è  [{color}]{message}[/{color}]")
    
    def error(self, message, color="bright_red"):
        self.logger.error(f"‚ùå [{color}]{message}[/{color}]")
    
    def critical(self, message, color="bold purple"):
        self.logger.critical(f"üö® [{color}]{message}[/{color}]")
    
    # C√°c method v·ªõi m√†u ƒë·∫∑c bi·ªát
    def success(self, message):
        self.logger.info(f"‚úÖ [bold green]{message}[/bold green]")
    
    def fail(self, message):
        self.logger.error(f"üí• [bold red on yellow]{message}[/bold red on yellow]")
    
    def highlight(self, message):
        self.logger.info(f"‚≠ê [bold yellow on blue]{message}[/bold yellow on blue]")
    
    def subtle(self, message):
        self.logger.info(f"[dim]{message}[/dim]")

# T·∫°o colored logger
colored_log = ColoredLogger(logger)

# Test
if __name__ == "__main__":
    print("=== Test m√†u m·∫∑c ƒë·ªãnh ===")
    colored_log.debug("Debug message v·ªõi m√†u cyan m·∫∑c ƒë·ªãnh")
    colored_log.info("Info message v·ªõi m√†u magenta m·∫∑c ƒë·ªãnh")
    colored_log.warning("Warning message v·ªõi m√†u cam m·∫∑c ƒë·ªãnh")
    colored_log.error("Error message v·ªõi m√†u ƒë·ªè s√°ng m·∫∑c ƒë·ªãnh")
    colored_log.critical("Critical message v·ªõi m√†u t√≠m ƒë·∫≠m m·∫∑c ƒë·ªãnh")
    
    print("\n=== Test m√†u t√πy ch·ªânh ===")
    colored_log.debug("Debug v·ªõi m√†u xanh l√°", color="green")
    colored_log.info("Info v·ªõi m√†u xanh d∆∞∆°ng", color="blue")
    colored_log.error("Error v·ªõi m√†u v√†ng", color="yellow")
    
    print("\n=== Test method ƒë·∫∑c bi·ªát ===")
    colored_log.success("Operation completed successfully!")
    colored_log.fail("Operation failed!")
    colored_log.highlight("Important information!")
    colored_log.subtle("Less important info...")
    
    print("\n=== T·∫•t c·∫£ m√†u Rich c√≥ th·ªÉ d√πng ===")
    colors = [
        "black", "red", "green", "yellow", "blue", "magenta", "cyan", "white",
        "bright_black", "bright_red", "bright_green", "bright_yellow", 
        "bright_blue", "bright_magenta", "bright_cyan", "bright_white",
        "orange3", "purple", "pink1", "deep_pink1", "gold1"
    ]
    
    for color in colors:
        colored_log.info(f"M√†u {color}", color=color)